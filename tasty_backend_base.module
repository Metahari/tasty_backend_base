<?php

/**
 * Implements hook_permission().
 */
function tasty_backend_base_permission() {
  return array(
    'access tasty backend content admin' => array(
      'title' => t('Access Tasty Backend content administration pages'),
      'description' => t('Access content administration pages provided by the Tasty Backend.'),
    ),
  );
}

/**
* Implements hook_ctools_plugin_api().
*/
function tasty_backend_base_ctools_plugin_api($owner, $api) {
  if ($owner == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_views_api().
 */
function tasty_backend_base_views_api() {
  return array("version" => "3.0");
}

/**
 * Implements hook_action_info().
 * 
 * Add missing action to bulk activate users.
 */
function tasty_backend_base_action_info() {
  return array(
    'tasty_backend_base_activate_user_action' => array(
      'type' => 'user',
      'label' => t('Activate user'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Action to activate a user.
 */
function tasty_backend_base_activate_user_action($user) {
  user_save($user, array('status' => '1'));
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alter the path of the 'Add term' link to point to our custom 'Add tags' context admin page.
 */
function tasty_backend_base_form_taxonomy_overview_terms_alter(&$form, &$form_state, $form_id) {
  // Make sure we only alter the link on our custom pages.
  $vocabularies = taxonomy_vocabulary_get_names();
  foreach ($vocabularies as $vocabulary => $vocabulary_info) {
    $page = page_manager_get_current_page();
    if ($page && $page['subtask'] == 'manage_' . $vocabulary ) {
      $form['#empty_text'] = t('No terms available. <a href="@link">Add term</a>.', array('@link' => url('admin/manage/categories/' . $vocabulary . '/add')));
    }
  }
}

/**
 * Implements hook_form_form_ID_alter().
 * Change redirects when deleting taxonomy terms.
 */
function tasty_backend_base_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'tasty_backend_base_term_delete_redirect';
}

/**
 * Submit handler to redirect to tasty backend manage categories page instead
 * of core admin/structure/taxonomy page.
 */
function tasty_backend_base_term_delete_redirect($form, &$form_state) {
  // Check we're deleting the term. @see taxonomy_form_term_submit().
  if (isset($form_state['values']['delete']) && $form_state['values']['delete'] === TRUE && !user_access('administer taxonomy')) {
    $form_state['redirect'] = 'admin/manage/categories';
  }
}

/**
 * Implements hook_menu_link_alter().
 */
function tasty_backend_base_menu_link_alter(&$item) {
  // Add a description for this menu link, can't seem to set it in the page manager code.
  // Checking if it's empty first so if a user overrides this in the UI it won't revert back to this.
  $vocabularies = taxonomy_vocabulary_get_names();
  foreach ($vocabularies as $vocabulary => $vocabulary_info) {
    if ($item['link_path'] == 'admin/manage/categories/' . $vocabulary && empty($item['options']['attributes']['title'])) {
      $item['options']['attributes']['title'] = t('Manage all terms in the "' . $vocabulary_info->name . '" vocabulary.');
    }
  }
}

/**
 * Set a new submit handler on permissions form.
 *
 * See tasty_backend_base_nav_menu_items().
 */
function tasty_backend_base_form_user_admin_permissions_alter(&$form, &$form_state, $form_id) {
  array_unshift($form['#submit'], 'tasty_backend_base_nav_menu_items');
}

/**
 * Custom submit handler for permissions form.
 * 
 * Create a menu item for each menu the 'content admin' user role has permissions to administer.
 */
function tasty_backend_base_nav_menu_items(&$form, &$form_state) {
  $content_role = user_role_load_by_name('content admin');
  $menus = menu_get_menus();
  $permissions = user_role_permissions(array($content_role->rid => $content_role->name));
  
  // Get all menu permissions.
  $menu_permissions = array();
  foreach($menus as $menu => $name) {
    $menu_permissions[] = 'administer ' . $menu . ' menu items';
  }
  
  // Get all default and updated values of menu permissions.
  $default_values = array();
  $updated_values = array();
  foreach($menu_permissions as $permission) {
    // Get the default values of the submitted form.
    if (in_array($permission, $form['checkboxes'][$content_role->rid]['#default_value'])) {
      $default_values[$permission] = $permission;
    }
    else {
      $default_values[$permission] = 0;
    }
    // Get the submitted values of the submitted form.
    $updated_values[$permission] = $form_state['values'][$content_role->rid][$permission];
  }
  
  // Check if the values have changed.
  if ($default_values !== $updated_values) {
    // Check menus and create a menu item if needed when the values change.
    foreach($menus as $menu => $name) {
      if ($menu != 'main-menu' && $updated_values['administer ' . $menu . ' menu items'] === 'administer ' . $menu . ' menu items') {
        // Check if menu item already exists. If it doesn't create a menu item.
        if (!tasty_backend_base_check_menu_item_exists($menu)) {
          $item = array(
            'link_title' => t($name),
            'link_path' => 'admin/structure/menu/manage/' . $menu,
            'menu_name' => 'navigation',
            'plid' => variable_get('tasty_backend_base_menus_mlid'),
          );
          menu_link_save($item);
      
          // Update the menu router information.
          menu_rebuild();
        }
      }
    }
  }
}

/**
 * Check if a menu item exists in the navigation menu.
 *
 * Returns TRUE if the menu item exists.
 */
function tasty_backend_base_check_menu_item_exists($menu) {
  $link_exists = FALSE;
  $menu_links = menu_load_links('navigation');
  foreach ($menu_links as $key => $link) {
    if ($link['link_path'] == 'admin/structure/menu/manage/' . $menu) {
      $link_exists = TRUE;
    }
  }
  return $link_exists;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Add custom action links per VBO view.
 */
function tasty_backend_base_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $views_page = views_get_page_view();
  if ($views_page) {
    $types = node_type_get_names();
    foreach ($types as $type => $name) {
      if ($views_page->name == $type . '_bulk_operations') {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => array(
            'title' => t('Add new ' . $name),
            'href' => 'node/add/' . str_replace('_', '-', $type),
            'localized_options' => array(
              'attributes' => array(
                'title' => t('Add new ' . $name),
              ),
            ),
          ),
        );
      }
    } 
  }
}

/**
 * Implements hook_node_type_insert().
 *
 * Add the Main Content vertical tab to new content types.
 */
function tasty_backend_base_node_type_insert($info) {
  // Only alter custom content types.  Those added from other modules shouldn't have this added.
  if ($info->custom) {
    tasty_backend_base_main_content_field_group($info->type);
  }
}

/**
 * Implements hook_node_type_delete().
 */
function tasty_backend_base_node_type_delete($info) {
  variable_del('tasty_backend_default_permissions_' . $info->type);
}

/**
 * Create a default "Main Content" field group.
 */
function tasty_backend_base_main_content_field_group($type) {
  $group = new stdClass();
  $group->id = NULL;
  $group->identifier = 'group_main_content|node|' . $type . '|form';
  $group->group_name = 'group_main_content';
  $group->entity_type = 'node';
  $group->bundle = $type;
  $group->mode = 'form';
  $group->parent_name = '';
  $group->table = 'field_group';
  $group->type = 'Normal';
  $group->label = 'Main Content';
  $group->weight = '0';
  $group->children = array(
    0 => 'title',
    1 => 'body',
  );
  $group->format_type = 'tab';
  $group->format_settings = array(
    'formatter' => 'closed',
    'instance_settings' => array(
      'description' => '',
      'classes' => 'group-main-content field-group-tab',
      'required_fields' => 1,
    ),
  );
  ctools_include('export');
  ctools_export_crud_save('field_group', $group);
  ctools_export_crud_enable('field_group', $group->identifier);
}

/**
 * Implements template_preprocess_page().
 */
function tasty_backend_page_preprocess_page(&$variables) {
  $path = current_path();
  if ($path == 'admin/manage/people/people/add') {
    drupal_set_title(t('Add user'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Add option to set Tasty Backend default permissions for content type.
 */
function tasty_backend_base_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    $form['tasty_backend_defaults'] = array(
      '#type' => 'fieldset',
      '#title' => t('Tasty Backend'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('tasty-backend-node-type-settings-form'),
      ),
      //'#attached' => array(
        //'js' => array(drupal_get_path('module', 'comment') . '/comment-node-form.js'),
      //),
    );
    $form['tasty_backend_defaults']['tasty_backend_default_permissions'] = array(
      '#type' => 'checkbox',
      '#title' => t('Add default Tasty Backend permissions for this content type.'),
      '#default_value' => variable_get('tasty_backend_default_permissions_' . $form['#node_type']->type, 1),
    );
    $form['#submit'][] = 'tasty_backend_base_default_permissions';
  }
}

/**
 * Custom submit handler to apply or remove default permissions on content types.
 */
function tasty_backend_base_default_permissions($form, &$form_state) {
  $add_perms = $form_state['values']['tasty_backend_default_permissions'];
  $role = user_role_load_by_name('content admin');
  $type = $form_state['values']['type'];
  user_role_change_permissions($role->rid, array(
    'create ' . $type . ' content' => $add_perms,
    'edit any ' . $type . ' content' => $add_perms,
    'delete any ' . $type . ' content' => $add_perms,
    'override ' . $type . ' published option' => $add_perms,
    'view any unpublished ' . $type . ' content' => $add_perms,
    )
  );
  // Clear menu cache otherwise the manage content link for the content type won't work.
  menu_cache_clear();
}
